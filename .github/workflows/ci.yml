name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Tests and Linting
  backend-tests:
    name: Backend Tests (Laravel)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: event_management_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd
        coverage: xdebug

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: backend/vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      working-directory: ./backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Create environment file
      working-directory: ./backend
      run: |
        cp .env.example .env
        php artisan key:generate

    - name: Configure environment for testing
      working-directory: ./backend
      run: |
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=event_management_test" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=password" >> .env

    - name: Run database migrations
      working-directory: ./backend
      run: php artisan migrate --force

    - name: Run PHPUnit tests
      working-directory: ./backend
      run: php artisan test --coverage-text

    - name: Run Laravel Pint (Code Style)
      working-directory: ./backend
      run: ./vendor/bin/pint --test

    - name: Generate API Documentation
      working-directory: ./backend
      run: php artisan l5-swagger:generate

    - name: Verify API Documentation
      working-directory: ./backend
      run: |
        if [ ! -f "storage/api-docs/api-docs.json" ]; then
          echo "API documentation generation failed"
          exit 1
        fi
        echo "API documentation generated successfully"

  # Frontend Tests and Linting
  frontend-tests:
    name: Frontend Tests (React)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint --if-present

    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Build application
      working-directory: ./frontend
      run: npm run build

  # Security and Quality Checks
  security-checks:
    name: Security & Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build and Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: event-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: event-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        echo "Docker Compose configuration is valid"

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-checks, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        echo "This could include:"
        echo "- Building and pushing Docker images to registry"
        echo "- Deploying to cloud provider (AWS, GCP, Azure)"
        echo "- Updating Kubernetes manifests"
        echo "- Running deployment scripts"
        # Add your actual deployment commands here
